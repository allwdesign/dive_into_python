"""
–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä.
üìå–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ –≤
–¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ stop —Å —à–∞–≥–æ–º step.
üìå–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, —Å—á–∏—Ç–∞–µ–º step=1.
üìå–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä, —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º start=1.
"""

class FactorialGenerator:

    def __init__(self, *args):
        if len(args) == 3:
            self.start, self.stop, self.step = args
        elif len(args) == 2:
            self.start, self.stop = args
            self.step = 1
        elif len(args) == 1:
            self.stop = args[0]
            self.start = 1
            self.step = 1


    def __iter__(self):
        return self

    def __next__(self):
        # –ü–µ—Ä–µ–±–æ—Ä —á–∏—Å–µ–ª –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª
        while self.start < self.stop:
            fact = 1
            # for generate factorial
            for i in range(1, self.start + 1):
                fact *= i
            self.start += 1
            return fact
        raise StopIteration


if __name__ == '__main__':
    fg = FactorialGenerator(1, 5, 1)
    for i in fg:
        print(i)
